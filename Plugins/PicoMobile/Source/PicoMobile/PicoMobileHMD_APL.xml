<?xml version="1.0" encoding="utf-8"?>
<!--Elias additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <init>
    <setBoolFromProperty result="bDisableHmd6DofModule" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="bDisableHmd6DofModule" default="false"/>
    <setBoolFromProperty result="bIsForeign" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="bIsForeign" default="false"/>
    <setBoolFromProperty result="bEnablePSensor" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="bEnablePSensor" default="false"/>
    <setBoolFromProperty result="bUseAdvanceInterface" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="bUseAdvanceInterface" default="false"/>
    <setBoolFromProperty result="bStartTimeEntitlementCheck" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="bStartTimeEntitlementCheck" default="false"/>
    <setStringFromProperty result="EntitlementCheckAppID" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="EntitlementCheckAppID" default=""/>
    <setBoolIsEqual result="bAppIdIsEmpty" arg1="$S(EntitlementCheckAppID)" arg2=""/>
  </init>

  <!-- optional updates applied to AndroidManifest.xml -->
  <androidManifestUpdates>
    <setStringFromProperty result="strMerchantID" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="merchantID" default=""/>
    <setStringFromProperty result="strAppID" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="appID" default=""/>
    <setStringFromProperty result="strAppKey" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="appKey" default=""/>
    <setStringFromProperty result="strScope" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="scope" default="get_user_info"/>
    <setStringFromProperty result="strPayKey" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="payKey" default=""/>
   
    <setElement result="AuthActivityElement" value="activity"/>
    <addAttribute tag="$AuthActivityElement" name="android:name" value="com.pico.loginpaysdk.auth.TransferStationActivity"/>
    <addAttribute tag="$AuthActivityElement" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar"/>
    <addAttribute tag="$AuthActivityElement" name="android:excludeFromRecents" value="true"/>
    <addAttribute tag="$AuthActivityElement" name="android:exported" value="true"/>
    <addAttribute tag="$AuthActivityElement" name="android:launchMode" value="singleTask"/>

    <setElement result="IntentFilterElement" value="intent-filter"/>
    <addElements tag="$IntentFilterElement">
      <action android:name="com.pico.loginpaysdk.intent.action.AuthCallback"/>
      <category android:name="android.intent.category.DEFAULT"/>
    </addElements>
    <addElement tag="$AuthActivityElement" name="IntentFilterElement"/>
    <addElement tag="application" name="AuthActivityElement"/>
    
    <if condition="bIsForeign">
      <true>
        <log text="Copy Pico Payment Infos For Foreign"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_app_id_foreign"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strAppID)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_app_key_foreign"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strAppKey)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_scope_foreign"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strScope)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_merchant_id_foreign"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strMerchantID)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_pay_key_foreign"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strPayKey)"/>
        <addElement tag="application" name="metaData"/>
      </true>
      <false>
        <log text="Copy Pico Payment Infos For China"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_app_id"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strAppID)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_app_key"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strAppKey)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_scope"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strScope)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_merchant_id"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strMerchantID)"/>
        <addElement tag="application" name="metaData"/>

        <setElement result="metaData" value="meta-data"/>
        <addAttribute tag="$metaData" name="android:name" value="pico_pay_key"/>
        <addAttribute tag="$metaData" name="android:value" value="$S(strPayKey)"/>
        <addElement tag="application" name="metaData"/>
      </false>
    </if>


    <addAttribute tag="application"  name="android:hardwareAccelerated" value="false" />
    <addAttribute tag="application"  name="android:requestLegacyExternalStorage" value="true" />
    <addAttribute tag="activity"  name="android:screenOrientation" value="landscape" />
    <addAttribute tag="activity" name="android:configChanges" value="screenSize|orientation|keyboardHidden|keyboard|navigation" android:hardwareAccelerated="false"/>
    <addAttribute tag="activity"  name="android:hardwareAccelerated" value="false" />
    <addElements tag="application">
      <meta-data android:name="pvr.app.type" android:value="vr" />
      <meta-data android:name="pvr.display.orientation" android:value="180" />
      <meta-data android:name="platform_logo" android:value="1"/>
      <meta-data android:name="loadingtextsize" android:value="16"/>
      <meta-data android:name="loadingwidth" android:value="500"/>
      <meta-data android:name="loadingheight" android:value="100"/>
      <meta-data android:name="loadingmarquee" android:value="1"/>
      <meta-data android:name="bottommargin" android:value="100"/>
      <meta-data android:name="marqueecount" android:value="10"/>
      <meta-data android:name="loadingalign" android:value="left"/>
      <meta-data android:name="pvr.sdk.version" android:value="UE4_1.2.6.1" />
    </addElements>
    <if condition="bUseAdvanceInterface">
        <true>
            <addElements tag="application">
                <meta-data android:name="pico_advance_interface" android:value="0"/>
            </addElements>
        </true>
    </if>
    <if condition="bDisableHmd6DofModule">
      <false>
        <addElements tag="application">
          <meta-data android:name="com.pvr.hmd.trackingmode" android:value="6dof" />
        </addElements>
      </false>
      <true>
        <addElements tag="application">
          <meta-data android:name="com.pvr.hmd.trackingmode" android:value="3dof" />
        </addElements>
      </true>
    </if>
    <if condition="bStartTimeEntitlementCheck">
        <false>
            <addElements tag="application">
                <meta-data android:name="enable_entitlementcheck" android:value="0" />
            </addElements>
        </false>
        <true>
            <if condition="bAppIdIsEmpty">
                <false>
                    <addElements tag="application">
                        <meta-data android:name="enable_entitlementcheck" android:value="1" />
                    </addElements>
                </false>
                <true>
                    <addElements tag="application">
                        <meta-data android:name="enable_entitlementcheck" android:value="0" />
                    </addElements>
                </true>
            </if>
        </true>
    </if>

    <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <addPermission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <addPermission android:name="android.permission.WRITE_SETTINGS"/>
    <addPermission android:name="android.permission.INTERNET"/>
    <addPermission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <addPermission android:name="android.permission.CHANGE_CONFIGURATION" />
  </androidManifestUpdates>

  <!-- optional files or directories to copy to Intermediate/Android/APK -->
  <resourceCopies>
    <isArch arch="armeabi-v7a">
      <log text="Copy PicoMobile Libs"/>
      <copyFile src="$S(PluginDir)/../../Libs/armeabi-v7a/libPvr_UESDK.so"
			 dst="$S(BuildDir)/libs/armeabi-v7a/libPvr_UESDK.so" />
    </isArch>
    <isArch arch="arm64-v8a">
      <log text="Copy PicoMobile Libs"/>
      <copyFile src="$S(PluginDir)/../../Libs/arm64-v8a/libPvr_UESDK.so"
			 dst="$S(BuildDir)/libs/arm64-v8a/libPvr_UESDK.so" />
    </isArch>

    <copyFile src="$S(PluginDir)/../../Libs/vractivity.jar"
					dst="$S(BuildDir)/libs/vractivity.jar" />
    
    <copyFile src="$S(PluginDir)/../../Libs/pvrjar.jar"
              dst="$S(BuildDir)/libs/pvrjar.jar" />
    
    <copyFile src="$S(PluginDir)/../../Libs/res.json"
        dst="$S(BuildDir)/assets/res.json" />
    
    <copyFile src="$S(PluginDir)/../../Libs/ToBServiceClient.jar"
        dst="$S(BuildDir)/libs/ToBServiceClient.jar" />

    <copyFile src="$S(PluginDir)/../../Libs/PaymentSDK_Android-v1.0.33.jar"
              dst="$S(BuildDir)/libs/PaymentSDK_Android-v1.0.33.jar" />
    
  </resourceCopies>

  <gameActivityImportAdditions>
    <insert>
      import android.util.Log;
      import com.psmart.vrlib.VrActivity;
      import com.psmart.vrlib.PicovrSDK;
      import com.psmart.aosoperation.SysActivity;
      import com.unity3d.player.ExternalDislayForUE;
      import android.view.View;
      import android.widget.FrameLayout;
      import android.app.Instrumentation;
      import android.hardware.display.DisplayManager;
      import android.view.Display;
      import android.os.Handler;
      import android.os.Message;
      import java.io.BufferedReader;
      import java.io.IOException;
      import java.io.InputStreamReader;
      import android.net.Uri;
      import android.os.Build;
      import android.widget.FrameLayout;
      import com.psmart.vrlib.VRDataUtils;
      import android.app.FragmentManager;
      import android.app.FragmentTransaction;
      import android.os.Bundle;
      import com.psmart.vrlib.LoadingFragment;
      import android.os.RemoteException;
      import com.pvr.verify.ICallback;
      import com.pvr.verify.IVerify;
      import android.content.ComponentName;
      import android.os.IBinder;
      import com.psmart.vrlib.VRConfigUtils;
      import com.psmart.vrlib.SmsPhoneMonitor;
      import com.psmart.vrlib.VRResUtils;
      import com.psmart.vrlib.VRGuardianSystem;//new boundary
      import com.psmart.vrlib.IPDListener;
      import com.psmart.vrlib.IPDManager;
      import com.psmart.vrlib.NativeVerfyInterface;
      import com.psmart.vrlib.VerifyTool;
        
      <!--import about ToBService -->
      import com.pvr.tobservice.ToBServiceHelper;
      import com.pvr.tobservice.interfaces.IBoolCallback;
      import com.pvr.tobservice.interfaces.IIntCallback;
      import com.pvr.tobservice.interfaces.ILongCallback;
      import com.pvr.tobservice.enums.PBS_DeviceControlEnum;
      import com.pvr.tobservice.enums.PBS_HomeEventEnum;
      import com.pvr.tobservice.enums.PBS_HomeFunctionEnum;
      import com.pvr.tobservice.enums.PBS_PackageControlEnum;
      import com.pvr.tobservice.enums.PBS_PowerOnOffLogoEnum;
      import com.pvr.tobservice.enums.PBS_ScreenOffDelayTimeEnum;
      import com.pvr.tobservice.enums.PBS_SleepDelayTimeEnum;
      import com.pvr.tobservice.enums.PBS_SwitchEnum;
      import com.pvr.tobservice.enums.PBS_SystemFunctionSwitchEnum;
      import com.pvr.tobservice.enums.PBS_SystemInfoEnum;
      import com.pvr.tobservice.enums.PBS_USBConfigModeEnum;

      <!--import about Pay -->
      import com.pico.loginpaysdk.auth.AccessInfo;
      import com.pico.loginpaysdk.auth.Callback;
      import com.pico.loginpaysdk.auth.sso.Login;
      import com.pico.loginpaysdk.exception.PicoException;
      import com.pico.loginpaysdk.net.RequestListener;
      import com.pico.loginpaysdk.utils.PicoAccessTokenKeeper;
      import com.pico.loginpaysdk.pay.PaySdkCallBack;
      import com.pico.loginpaysdk.pay.PicoPay;
      import com.pico.loginpaysdk.pay.model.PayOrder;
      import com.pico.loginpaysdk.utils.RandomUtil;
      import android.view.KeyEvent;
      import android.util.Log;
      
      <!--import about 2d loading -->
      import android.content.pm.PackageInfo;
      import android.content.pm.PackageManager;
      import android.content.pm.Signature;
      import android.content.pm.ApplicationInfo;
    </insert>
    
  </gameActivityImportAdditions>

  <gameActivityClassAdditions>

    <insert>
      public SmsPhoneMonitor smsPhoneMonitor;
      <!--this is for screen projection-->
      DisplayManager  mDisplayManager = null;
      SurfaceView mPresentationView = null;
      ExternalDislayForUE  mPresentation = null;
      
      <!--this is for 2d loading-->
      private LoadingFragment loadingFragment = null;
      private FragmentManager fragmentManager = getFragmentManager();
      public static Handler mhandler = null;
      
      <!-- this is new boundary -->
      public VRGuardianSystem vrBoundary = null;
      public int isFirstResume =0;
      public int isUnreal423 = 0;
      public VrActivity vrActivity;
      public Context mContext;
      public VerifyTool mVerifyTool = null;
      public boolean AndroidThunkJava_IsOculusMobileApplication()
      {
      return true;
      }
      
      <!--0 success; -1 invalid params;-2 service not exit;-3 time out;-->
      public native void nativePicoEntitlementVerifyCallback(int code);
      public NativeVerfyInterface verifyAppCallBack = new NativeVerfyInterface() {
      @Override
      public void verifyCallback(int code){
      Log.debug("Pvr_UE HMDXML callback# " + Thread.currentThread().toString());
      Log.debug("Pvr_UE HMDXML callback# code:" + code);
      nativePicoEntitlementVerifyCallback(code);
      }
      @Override
      public void bindSuccessCallback()
      {
      
      }
      };
      
      public int AndroidThunkJava_verifyAPP(String appID,String publicKey)
      {
      
      return VerifyTool.verifyAPPExt(this, appID,publicKey);
      }

		public void AndroidThunkJava_HideLoading()
		{
		if(loadingFragment!=null)
		{
		loadingFragment.destroy();
		mhandler.postDelayed(new Runnable(){
		@Override
		public void run(){
		if(loadingFragment!=null)
		{
		  fragmentManager.beginTransaction().hide(loadingFragment).commitAllowingStateLoss();
		  fragmentManager.beginTransaction().remove(loadingFragment).commitAllowingStateLoss();
		  loadingFragment = null;
		}
		}
		},0);
		}
		}

		public VrActivity AndroidThunkJava_UEPvr_GetRawClass()
		{
		return vrActivity;
		}

		public int AndroidThunkJava_UEPvr_GetCurrentBrightness()
		{
		int currentB = SysActivity.Pvr_GetCommonBrightness(this.getApplicationContext());
		Log.debug("Pvr_UE HMDXML Current screen brightness:" + currentB);
		return currentB;
		}

		//brightness: Screen brightness，0~255
		//return true if succeed,false if failed
		public boolean AndroidThunkJava_UEPvr_SetBrightness(int brightness)
		{
		boolean ret = false;
		ret = SysActivity.Pvr_SetCommonBrightness(brightness,this.getApplicationContext());
		Log.debug("Pvr_UE HMDXML Set brightness: " + (ret == true?"succeed":"failed"));
		return ret;
		}

		public int AndroidThunkJava_UEPvr_GetCurrentVolume()
		{
		int currentV = SysActivity.Pvr_GetAudionumber();
		Log.debug("Pvr_UE HMDXML Current system volume:" + currentV);
		return currentV;
		}

		public int AndroidThunkJava_UEPvr_GetMaxVolumeNumber()
		{
		int maxV = SysActivity.Pvr_GetMaxAudionumber();
		Log.debug("Pvr_UE HMDXML Max system volume:" + maxV);
		return maxV;
		}

		public void AndroidThunkJava_UEPvr_SetVolume(int volume)
		{
		SysActivity.Pvr_ChangeAudio(volume);
		}

		public void AndroidThunkJava_UEPvr_VolumeUp()
		{
		SysActivity.Pvr_UpAudio();
		}

		public void AndroidThunkJava_UEPvr_VolumeDown()
		{
		SysActivity.Pvr_DownAudio();
		}

		public int AndroidThunkJava_UEPvr_GetHandness()
		{
		int handness = VrActivity.getPvrHandness(this.getApplicationContext());
		Log.debug("Pvr_UE HMDXML Current controller handness:" + handness);
		return handness;
		}

      public int AndroidThunkJava_UEPvr_GetControllerType()
      {
      int ControllerType = HbClientActivity.getControllerType();
      Log.debug("Pvr_UE HMDXML Current ControllerType:" + ControllerType);
      return ControllerType;
      }


		public String AndroidThunkJava_UEPvr_GetDeviceSN() {
		return SysActivity.getDeviceSN();
		}


		<!--Override dispatchKeyEvent-->
      @Override
      public boolean dispatchKeyEvent(KeyEvent event)
      {
        int action = event.getAction();
        KeyEvent event1 = event;
        if (event.getKeyCode()==1001){
            event1 = new KeyEvent(action,96);
        }
        if(action == KeyEvent.ACTION_DOWN &amp;&amp; vrBoundary.handleKeyDownEvent(event1.getKeyCode(),event1)){
      Log.debug( "Pvr_UE HMDXML ======vrBoundary.handleKeyDownEvent true");
      return true;
      }
      if (event.getKeyCode()==1001){
      Log.debug( "Pvr_UE HMDXML ======dispatchKeyEvent  1001--->96");
      keyRemappingSendFakeKeyEvent(action , 96);
      }
      Log.debug("Pvr_UE HMDXML ==============>onKeyDown");
      return super.dispatchKeyEvent(event1);
      }
      
      <!--Change keycode from 1001 to 96 for finch-->
      private static void keyRemappingSendFakeKeyEvent(final int action,final int keyCode) {
      new Thread(new Runnable() {
      public void run() {
      try {
      Instrumentation inst=new Instrumentation();
      //KeyEvent event = new KeyEvent(action,keyCode);
      final long eventTime = SystemClock.uptimeMillis();
      KeyEvent event =new KeyEvent(eventTime - 50, eventTime - 50, action, keyCode, 0, 0, 1001, 0, KeyEvent.FLAG_FROM_SYSTEM, InputDevice.SOURCE_GAMEPAD);
      int id = event.getDeviceId();
      Log.debug( "Pvr_UE HMDXML ======dispatchKeyEvent 1001--->96  " + id);
      inst.sendKeySync(event);
      }  catch (Exception e) {
      // TODO: handle exception
      }}}).start();
      }
      
      <!--Override onKeyUp to awake boundary setting app-->
      @Override 
      public boolean onKeyUp(int keyCode, KeyEvent event)
      {
      <!--new boundary -->
      if(vrBoundary.handleKeyUpEvent(keyCode,event))
      {
      Log.debug("Pvr_UE HMDXML ==============>vrBoundary.handleKeyUpEvent true");
      return true;
      }
      Log.debug("Pvr_UE HMDXML ==============>onKeyUp");
      return super.onKeyUp(keyCode,event);
      }

      public native static void nativePicoIPDChanged(float ipd);
      
      <!-- this is ipd direct call -->
      public static void ipdRefreshNotify(float ipd){
        Log.debug("Pvr_UE HMDXML ipdRefreshNotify = " + ipd);
        nativePicoIPDChanged(ipd);
      }

      <!-- this is ipd manager/listener -->
      private IPDManager mIPDManager = null;
      private IPDListener mIPDListener = new IPDListener(){
        @Override
        public void onPhysicalIPDChanged(float ipd) {
          Log.debug("Pvr_UE HMDXML onPhysicalIPDChanged = " + ipd);
          nativePicoIPDChanged(ipd);
        }
      };

      public void InitPSensor()
      {
      SysActivity.initPsensor(this);
      }

      public int AndroidThunkJava_UEPvr_GetPsensorState()
      {
      return SysActivity.getPsensorState();
      }

      public void UnRegisterPSensor()
      {
      SysActivity.unregisterListener();
      }
      public void CreatePresentation()
      {
      Log.debug("Pvr_UE HMDXML CreatePresentation Begin");
      mDisplayManager = (DisplayManager)getSystemService(DISPLAY_SERVICE);
      Display[] presentationDisplays;
      presentationDisplays = mDisplayManager.getDisplays(DisplayManager.DISPLAY_CATEGORY_PRESENTATION);
      if (false &amp;&amp; Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &amp;&amp; !Settings.canDrawOverlays(this)) 
        {
          Log.debug("Pvr_UE HMDXML UE Intent startActivity!");
          Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
          intent.setData(Uri.parse("package:" + this.getPackageName()));
          intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          this.startActivity(intent);
        } else 
        {
          if ( presentationDisplays.length > 0 &amp;&amp; vrActivity.Pvr_GetWFDEnableStatus() == 1 )
      {
      if (mPresentation != null)
      {
      Log.debug("Pvr_UE HMDXML UE mPresentation already exist!");
      }
      else{
      Log.debug("Pvr_UE DISFT HMDXML MonoCasting open");
      mPresentation = new ExternalDislayForUE(this.getApplicationContext(), presentationDisplays[0], null);
      if (!(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O))
      {
      mPresentation.getWindow().setType(WindowManager.LayoutParams.TYPE_PHONE);
      }
      mPresentation.show();
      Log.debug("Pvr_UE HMDXML UE CreatePresentation getSurfaceView");
      mPresentationView = mPresentation.getSurfaceView();
      }
      }
      }
      Log.debug("Pvr_UE HMDXMLCreatePresentation End!");
      }

      public void DestoryPresentation()
      {
      Log.debug("Pvr_UE HMDXML DestoryPresentation Begin");
      if ( mPresentation != null )
      {
      Log.debug("Pvr_UE HMDXML Presentation != null!");
      mPresentationView.setVisibility(View.GONE);
      mPresentationView = null;
      mPresentation.dismiss();
      mPresentation = null;
      }
      Log.debug("Pvr_UE HMDXML DestoryPresentation End");
      }
      public String GetObjectOrArray(String id,int type)
      {
      return VrActivity.getObjectOrArray(id,type);
      }
      
      public String GetSystemProperty(String PropertyKey) {
      String PropertyValue = "-1";
      if(PropertyKey==null){
      return PropertyValue;
      }
      try {
      Process process = Runtime.getRuntime().exec("getprop "+PropertyKey);
      InputStreamReader ir = new InputStreamReader(process.getInputStream());
      BufferedReader input = new BufferedReader(ir);
      PropertyValue = input.readLine();
      } catch (IOException e) {
      e.printStackTrace();
      }
      if(PropertyValue == "") 
      {
        PropertyValue = "-1";  
      }
      return PropertyValue;
      }



      @Override
      public void onAttachedToWindow() {
      // TODO Auto-generated method stub
      super.onAttachedToWindow();
      Log.debug("Pvr_UE HMDXML onAttachedToWindow!!!!!!!!!!!");      
      if(loadingFragment !=null)
        { 
          if(isUnreal423 == 0)
          {
            fragmentManager.beginTransaction().add(android.R.id.content,loadingFragment,"loading").commitAllowingStateLoss();
          }
        }
      }

    </insert>

    <insert>
      <!-- The interface about Pay-->
      private Login mLogin;
      private AccessInfo mAccessInfo;
      private MyPayCallBack mMyPayCallBack;
      private MyQueryOrdersCallBack mMyQueryOrdersCallBack;

      public native void nativePicoLogInOutCallback(boolean isSuccess, String reason);
      public native void nativePicoGetUserInfoCompleteCallback(String info);
      public native void nativePicoPayOrderCallback(String code, String msg);
      public native void nativePicoPaymentExceptionCallback(String exception);
      public native void nativePicoQueryOrdersCallback(String code, String msg);;

      public void AndroidThunkJava_UEPvr_Payment_Login()
      {
      if (mLogin != null) {
      mLogin.login(new Callback() {
      @Override
      public void loginCallback(boolean isSuccess, String reason) {
      nativePicoLogInOutCallback(isSuccess,reason);
      }
      });
      }
      else
      {
      Log.debug("Pvr_UE HMDXML Login class is not created!");
      }
      }

      public void AndroidThunkJava_UEPvr_Payment_Logout()
      {
      if (mLogin != null) {
      mLogin.logout(this, new Callback() {
      @Override
      public void loginCallback(boolean isSuccess, String reason) {
      nativePicoLogInOutCallback(isSuccess,reason);
      }
      });
      }
      else
      {
      Log.debug("Pvr_UE HMDXML Login class is not created!");
      }
      }


      public void AndroidThunkJava_UEPvr_Payment_GetUserInfo()
      {
      if (mLogin != null) {
      mLogin.getUserInfo(new RequestListener() {
      @Override
      public void onComplete(String paramString)
      {
      nativePicoGetUserInfoCompleteCallback(paramString);
      }
      @Override
      public void onException(PicoException paramException) {
      nativePicoPaymentExceptionCallback(paramException.getMessage());
      }
      });
      }
      else
      {
      Log.debug("Pvr_UE HMDXML Login class is not created!");
      }
      }

      public void AndroidThunkJava_UEPvr_Payment_PayWithPayCode(String orderNumber, String orderTitle, String productDetail, String notifyUrl, String payCode)
      {
      //Log.debug(orderNumber + "//" + orderTitle + "//" + productDetail + "//" + notifyUrl + "//" + payCode);
      PayOrder mOrder = new PayOrder();
      mOrder.setBusinessOrder(orderNumber);
      mOrder.setSubject(orderTitle);
      mOrder.setBody(productDetail);
      mOrder.setNotifyUrl(notifyUrl);
      mOrder.setPayCode(payCode);
      PicoPay.getInstance(this).pay(mOrder,mMyPayCallBack);
      }

      public void AndroidThunkJava_UEPvr_Payment_PayWithCoin(String orderNumber, String orderTitle, String productDetail, String notifyUrl, int coinCount)
      {

      //Log.debug(orderNumber + "//" + orderTitle + "//" + productDetail + "//" + notifyUrl + "//" + coinCount);
      PayOrder mOrder = new PayOrder();
      mOrder.setBusinessOrder(orderNumber);
      mOrder.setSubject(orderTitle);
      mOrder.setBody(productDetail);
      mOrder.setNotifyUrl(notifyUrl);
      mOrder.setTotalFree(String.valueOf(coinCount));
      PicoPay.getInstance(this).pay(mOrder,mMyPayCallBack);
      }

      public void AndroidThunkJava_UEPvr_Payment_QueryOrder(String orderNumber)
      {
      PicoPay.getInstance(this).queryOrders(orderNumber,mMyQueryOrdersCallBack);
      }

      class MyPayCallBack implements PaySdkCallBack {
      @Override
      public void callback(String code, String msg) {
      nativePicoPayOrderCallback(code,msg);
      }
      @Override
      public void exceptionCallBack(String msg) {
      nativePicoPaymentExceptionCallback(msg);
      }
      }

      class MyQueryOrdersCallBack implements PaySdkCallBack {
      @Override
      public void callback(String code, String msg) {
      nativePicoQueryOrdersCallback(code,msg);
      }
      @Override
      public void exceptionCallBack(String msg) {
      nativePicoPaymentExceptionCallback(msg);
      }
      }
    </insert>
      
  <insert>
      <!-- The interface about ToBServicesClient-->
 
      public native void JavaToCSetDeviceActionCallBack(int EventType,int Result);
      public native void JavaToCAPPMangerCallBack(int EventType,String AppPath,int result);
      
      public void BindToBService()
      {
        ToBServiceHelper.getInstance().bindTobService(this);
      }

      public void UnBindToBService()
      {
        ToBServiceHelper.getInstance().unBindTobService(this);
      }
      
      public String  GetDeviceInfo(int type)
      {
        String Result = "";
        PBS_SystemInfoEnum InfoType = PBS_SystemInfoEnum.values()[type];
        Result = ToBServiceHelper.getInstance().pbsStateGetDeviceInfo(InfoType,0);
        return Result;
      }
      
      
      IIntCallback SetDeviceActionCallback_Reboot = new IIntCallback.Stub() 
      {
      @Override
      public void callback(int result) throws RemoteException 
      {
      JavaToCSetDeviceActionCallBack(0,result);
      }
      };

      IIntCallback SetDeviceActionCallback_ShutDown = new IIntCallback.Stub()
      {
      @Override
      public void callback(int result) throws RemoteException
      {
      JavaToCSetDeviceActionCallBack(1,result);
      }
      };
      
      public void SetDeviceAction(int deviceControlEnum)
      {
      PBS_DeviceControlEnum DeviceControlEnum = PBS_DeviceControlEnum.values()[deviceControlEnum];
      if(deviceControlEnum == 0)
      {
      ToBServiceHelper.getInstance().pbsControlSetDeviceAction(DeviceControlEnum,SetDeviceActionCallback_Reboot);
      }else if(deviceControlEnum == 1)
      {
      ToBServiceHelper.getInstance().pbsControlSetDeviceAction(DeviceControlEnum,SetDeviceActionCallback_ShutDown);
      }    
      }

      
      public class APPMangerCallBackClass
      {
      public APPMangerCallBackClass(int InEventType,String InAppPath)
      {
      EventType = InEventType;
      AppPath = InAppPath;
      }
      int EventType;
      String AppPath;
      public IIntCallback APPMangerCallback = new IIntCallback.Stub()
      {
      @Override
      public void callback(int result) throws RemoteException
      {
      JavaToCAPPMangerCallBack(EventType,AppPath,result);
      }
      };
      }
      
      public void APPManger(int packageControlEnum,String path,int ext)
      {
      APPMangerCallBackClass mAPPMangerCallBack = new APPMangerCallBackClass(packageControlEnum,path);
      PBS_PackageControlEnum PackageControlEnum = PBS_PackageControlEnum.values()[packageControlEnum];
      ToBServiceHelper.getInstance().pbsControlAPPManger(PackageControlEnum,path,ext,mAPPMangerCallBack.APPMangerCallback);
     
      }

      public native void JavaToCAutoConnectWifiCallBack(boolean result);
      public IBoolCallback SetAutoConnectWIFICallback = new IBoolCallback.Stub()
      {
      @Override
      public void callBack(boolean result) throws RemoteException {
      JavaToCAutoConnectWifiCallBack(result);
      }
      };

      public void SetAutoConnectWIFI(String ssid, String pwd, int ext)
      {
      ToBServiceHelper.getInstance().pbsControlSetAutoConnectWIFI(ssid,pwd,ext,SetAutoConnectWIFICallback);
      }

      public native void JavaToCClearAutoConnectWifiCallBack(boolean result);
      IBoolCallback ClearAutoConnectWIFICallback = new IBoolCallback.Stub()
      {
      @Override
      public void callBack(boolean result) throws RemoteException {
      JavaToCClearAutoConnectWifiCallBack(result);
      }
      };
      
      public void ClearAutoConnectWIFI()
      {
        ToBServiceHelper.getInstance().pbsControlClearAutoConnectWIFI(ClearAutoConnectWIFICallback);
      }

      public native void JavaToCSetHomeKeyCallBack(int EventType, int FunctionType,boolean Result);
      public class SetHomeKayClass
      {
      int HomeKeyEvent;
      int HomeKeyFunction;
      public SetHomeKayClass(int InHomeKeyEvent,int InHomeKeyFunction)
      {
      HomeKeyEvent = InHomeKeyEvent;
      HomeKeyFunction = InHomeKeyFunction;
      }

      public IBoolCallback SetHomeKeyCallback = new IBoolCallback.Stub()
      {
      @Override
      public void callBack(boolean result) throws RemoteException {
      JavaToCSetHomeKeyCallBack(HomeKeyEvent,HomeKeyFunction,result);
      }
      };
      }
      
      public void SetHomeKey(int eventEnum, int functionEnum)
      {
      SetHomeKayClass mSetHomeKay = new SetHomeKayClass(eventEnum,functionEnum);
      PBS_HomeEventEnum EventEnum = PBS_HomeEventEnum.values()[eventEnum];
      PBS_HomeFunctionEnum FunctionEnum = PBS_HomeFunctionEnum.values()[functionEnum];
      ToBServiceHelper.getInstance().pbsPropertySetHomeKey(EventEnum,FunctionEnum,mSetHomeKay.SetHomeKeyCallback);
      }

      public native void JavaToCSetHomeKeyAllCallBack(int EventType, int FunctionType,boolean Result);
      public class SetHomeKayAllClass
      {
      int HomeKeyEvent;
      int HomeKeyFunction;
      public SetHomeKayAllClass(int InHomeKeyEvent,int InHomeKeyFunction)
      {
      HomeKeyEvent = InHomeKeyEvent;
      HomeKeyFunction = InHomeKeyFunction;
      }

      public IBoolCallback SetHomeKeyAllCallback = new IBoolCallback.Stub()
      {
      @Override
      public void callBack(boolean result) throws RemoteException {
      JavaToCSetHomeKeyAllCallBack(HomeKeyEvent,HomeKeyFunction,result);
      }
      };
      }
      
      public void SetHomeKeyAll(int eventEnum, int functionEnum, int timesetup, String pkg, String className)
      {
      SetHomeKayAllClass mSetHomeKayAll = new SetHomeKayAllClass(eventEnum,functionEnum);
      PBS_HomeEventEnum EventEnum = PBS_HomeEventEnum.values()[eventEnum];
      PBS_HomeFunctionEnum FunctionEnum = PBS_HomeFunctionEnum.values()[functionEnum];
      ToBServiceHelper.getInstance().pbsPropertySetHomeKeyAll(EventEnum,FunctionEnum,timesetup,pkg,className,mSetHomeKayAll.SetHomeKeyAllCallback);
      }

      public native void JavaToCDisablePowerKeyCallBack(boolean isSingleTap,int Result);
      IIntCallback DisablePowerKeyCallback_SingleClick = new IIntCallback.Stub()
      {
      @Override
      public void callback(int result) throws RemoteException
      {
      JavaToCDisablePowerKeyCallBack(true,result);
      }
      };

      IIntCallback DisablePowerKeyCallback_DoubleClick = new IIntCallback.Stub()
      {
      @Override
      public void callback(int result) throws RemoteException
      {
      JavaToCDisablePowerKeyCallBack(false,result);
      }
      };
      
      public void DisablePowerKey(boolean isSingleTap, boolean enable)
      {
      if(isSingleTap == true)
      {
      ToBServiceHelper.getInstance().pbsPropertyDisablePowerKey(isSingleTap,enable,DisablePowerKeyCallback_SingleClick);
      }else
      {
      ToBServiceHelper.getInstance().pbsPropertyDisablePowerKey(isSingleTap,enable,DisablePowerKeyCallback_DoubleClick);
      }
      }
      
      public void SetSleepDelay(int timeEnum)
      {
      ToBServiceHelper.getInstance().pbsPropertySetSleepDelay(PBS_SleepDelayTimeEnum.values()[timeEnum]);
      }

      public native void JavaToCSetScreenOffDelayCallBack(int Result);
      public class SetScreenOffDelayClass
      {
      int timeIndex;
      public SetScreenOffDelayClass(int IntimeIndex)
      {
      timeIndex = IntimeIndex;
      }

      IIntCallback SetScreenOffDelayCallback = new IIntCallback.Stub()
      {
      @Override
      public void callback(int result) throws RemoteException
      {
      JavaToCSetScreenOffDelayCallBack(result);
      }
      };
      }
      public void SetScreenOffDelay(int timeEnum)
      {
      SetScreenOffDelayClass mSetScreenOffDelay = new SetScreenOffDelayClass(timeEnum);
      ToBServiceHelper.getInstance().pbsPropertySetScreenOffDelay(PBS_ScreenOffDelayTimeEnum.values()[timeEnum],mSetScreenOffDelay.SetScreenOffDelayCallback);
      }
      
      public void SystemFunction(int systemFunction, int switchEnum, int ext)
      {
      ToBServiceHelper.getInstance().pbsSwitchSystemFunction(PBS_SystemFunctionSwitchEnum.values()[systemFunction], PBS_SwitchEnum.values()[switchEnum],ext);
      }
      
      public void SetUsbConfigurationOption(int uSBConfigModeEnum, int ext)
      {
      ToBServiceHelper.getInstance().pbsSwitchSetUsbConfigurationOption(PBS_USBConfigModeEnum.values()[uSBConfigModeEnum], ext);
      } 
  
      public void ScreenOn()
      {
      ToBServiceHelper.getInstance().pbsScreenOn();
      }

      public void ScreenOff()
      {
      ToBServiceHelper.getInstance().pbsScreenOff();
      }
 
      public void AcquireWakeLock()
      {
      ToBServiceHelper.getInstance().pbsAcquireWakeLock();
      }
  
      public void ReleaseWakeLock()
      {
      ToBServiceHelper.getInstance().pbsReleaseWakeLock();
      }

      public native void JavaToCWriteConfigFileToDataLocalCallback(boolean result);
      public IBoolCallback WriteConfigFileToDataLocalCallback = new IBoolCallback.Stub()
      {
      @Override
      public void callBack(boolean result) throws RemoteException {
      JavaToCWriteConfigFileToDataLocalCallback(result);
      }
      };
    
      public void WriteConfigFileToDataLocal(String path, String content)
      {
      ToBServiceHelper.getInstance().pbsWriteConfigFileToDataLocal(path,content,WriteConfigFileToDataLocalCallback);
      }


      public native void JavaToCResetAllKeyToDefaultCallback(boolean Result);
      public IBoolCallback ResetAllKeyToDefaultCallback = new IBoolCallback.Stub()
      {
      @Override
      public void callBack(boolean result) throws RemoteException {
      JavaToCResetAllKeyToDefaultCallback(result);
      }
      };
  
      public void ResetAllKeyToDefault()
      {
      ToBServiceHelper.getInstance().pbsResetAllKeyToDefault(ResetAllKeyToDefaultCallback);
      }

      public void EnableEnterKey()
      {
      ToBServiceHelper.getInstance().pbsEnableEnterKey();
      }
  
      public void DisableEnterKey()
      {
      ToBServiceHelper.getInstance().pbsDisableEnterKey();
      }
      
      public void EnableVolumeKey()
      {
      ToBServiceHelper.getInstance().pbsEnableVolumeKey();
      }
  
      public void DisableVolumeKey()
      {
      ToBServiceHelper.getInstance().pbsDisableVolumeKey();
      }
  
      public void EnableBackKey()
      {
      ToBServiceHelper.getInstance().pbsEnableBackKey();
      }
      
      public void DisableBackKey()
      {
      ToBServiceHelper.getInstance().pbsDisableBackKey();
      }
  
  </insert>
  </gameActivityClassAdditions>

  <gameActivityOnCreateAdditions>
    <insert>
      Log.debug("Pvr_UE HMDXML gameActivityOnCreate");
      mIPDManager = new IPDManager();
      mIPDManager.setListener(mIPDListener);

      VRResUtils.loadRes(this);
      smsPhoneMonitor = new SmsPhoneMonitor(this);
      smsPhoneMonitor.registeReciver();
      
      mVerifyTool = new VerifyTool(this);
      VerifyTool.registerCallback(verifyAppCallBack);
      mVerifyTool.bindVerifyService();
      
      VRConfigUtils.enableSafetyTip(false);
  
      View decorView = getWindow().getDecorView();
      int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
      | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY | View.SYSTEM_UI_FLAG_FULLSCREEN;
      decorView.setSystemUiVisibility(uiOptions);

      SysActivity.Pvr_InitAudioDevice(this.getApplicationContext());

      mDisplayManager = (DisplayManager)getSystemService(DISPLAY_SERVICE);


      mhandler = new Handler();
      <!--new boundary -->
      vrBoundary = new VRGuardianSystem(this);
      isFirstResume = 0;
      LoadingFragment.dismissSplashScreen(this);
      loadingFragment = new LoadingFragment();

      String packageName;
      PackageManager pm;
      try {
      pm = this.getApplicationContext().getPackageManager();
      packageName = this.getApplicationContext().getPackageName();
      if (pm == null || packageName == null)
      {
      Log.debug("Pvr_UE HMDXML pm == null || packageName == null" );
      return ;
      }
      }
      catch (RuntimeException e)
      {
      Log.debug("Pvr_UE HMDXML pm" + e);
      return ;
      }

      ApplicationInfo applicationInfo;
      try
      {
      applicationInfo = pm.getApplicationInfo(packageName, PackageManager.GET_META_DATA);
      }
      catch (PackageManager.NameNotFoundException e)
      {
      Log.debug("Pvr_UE HMDXML ApplicationInfo " + e);
      return ;
      }
      String msg= applicationInfo.metaData.getString("com.epicgames.ue4.GameActivity.EngineVersion");
      String version = new String("4.23.1");
      if(msg.equals(version))
      {
        Log.debug("Pvr_UE HMDXML UnrealVersion 423");
        isUnreal423 = 1;
      }
      if(isUnreal423 == 1)
      {
        fragmentManager.beginTransaction().add(android.R.id.content,loadingFragment,"loading").commitAllowingStateLoss();
      }
    </insert>

    <insert>
      mLogin = new Login(this.getApplicationContext());
      mMyPayCallBack = new MyPayCallBack();
      mMyQueryOrdersCallBack = new MyQueryOrdersCallBack();
    </insert>

  </gameActivityOnCreateAdditions>

  <gameActivityOnStartAdditions>
    <insert>
      Log.debug("Pvr_UE HMDXML gameActivityOnStartAdditions");
    </insert>
  </gameActivityOnStartAdditions>
   
  <gameActivityOnResumeAdditions>
    <insert>
      Log.debug("Pvr_UE HMDXML gameActivityOnResumeAdditions");
      mhandler.postDelayed(new Runnable() {
      public void run() {
      CreatePresentation();
      }
      },5);
      if(loadingFragment!=null)
      {
       if(isUnreal423 == 1)
        {
        fragmentManager.beginTransaction().show(loadingFragment).commitAllowingStateLoss();
        }
      }
    </insert>
    <if condition="bEnablePSensor">
      <true>
        <insert>
          Log.debug("Pvr_UE HMDXML initPsensor!");
          SysActivity.initPsensor(this);
        </insert>
      </true>
    </if>
    <insert>
      vrActivity.Pvr_StartHomeKeyLongPressReceiver(this);
      <!-- new boundary resume-->
      Log.debug("Pvr_UE HMDXML gameActivityOnResumeAdditions isFirstResume:" + isFirstResume);
      if(isFirstResume ==0 || isFirstResume == 1  )
      {
      Log.debug("Pvr_UE HMDXML vrBoundary.onResume() 45");
      mhandler.postDelayed(new Runnable() {
      public void run() {
      vrBoundary.onResume();
      }
      },45);
      }
      else
      {
      Log.debug("Pvr_UE HMDXML vrBoundary.onResume() 0");
      vrBoundary.onResume();
      }
      isFirstResume++;

    </insert>
  </gameActivityOnResumeAdditions>

  <gameActivityOnPauseAdditions>
    <insert>
      Log.debug("Pvr_UE HMDXML gameActivityOnPauseAdditions");
    </insert>
    <if condition="bEnablePSensor">
      <true>
        <insert>
          Log.debug("Pvr_UE HMDXML unregisterListener!");
          SysActivity.unregisterListener();
        </insert>
      </true>
    </if>
    <insert>
      vrActivity.Pvr_StopHomeKeyLongPressReceiver(this);
        mhandler.postDelayed(new Runnable() {
        public void run() {
        DestoryPresentation();
        }
        },50);
      
    </insert>
  </gameActivityOnPauseAdditions>

  <gameActivityOnStopAdditions>
    <insert>
      Log.debug("Pvr_UE HMDXML gameActivityOnStopAdditions");
    
      isFirstResume = 2;
    </insert>
  </gameActivityOnStopAdditions>

  <gameActivityOnDestroyAdditions>
    <insert>
      Log.debug("Pvr_UE HMDXML gameActivityOnDestroyAdditions");
      smsPhoneMonitor.unRegisteReceiver();
      
      VerifyTool.unRegisterCallback(verifyAppCallBack);
      mVerifyTool.unbindVerifyService();
    </insert>
  </gameActivityOnDestroyAdditions>

  <gameActivityOnActivityResultAdditions>
    <insert>
      if (mLogin != null) 
      {
      mLogin.authorizeCallBack(requestCode, resultCode, data);
      }
    </insert>
  </gameActivityOnActivityResultAdditions>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      -keep class com.pico.loginpaysdk.** { *; }
    </insert>
  </proguardAdditions>
  
  <!-- optional libraries to load in GameActivity.java before libUE4.so -->
  <soLoadLibrary>
        <loadLibrary name="Pvr_UESDK" failmsg="PicoPlugin library not loaded and required!" />
  </soLoadLibrary>
</root>